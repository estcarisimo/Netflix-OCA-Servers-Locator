[project]
name = "netflix-oca-locator"
version = "2.0.0"
description = "A tool to identify Netflix's Open Connect Appliances (OCAs) allocated to your network"
readme = "README.md"
license = {file = "LICENSE"}
authors = [{name = "Esteban Carisimo", email = ""}]
requires-python = ">=3.9"
keywords = ["netflix", "oca", "cdn", "network", "streaming", "performance"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet",
    "Topic :: System :: Networking",
    "Topic :: Utilities",
]

dependencies = [
    "httpx>=0.27.0",
    "pandas>=2.0.0",
    "typer>=0.12.0",
    "rich>=13.7.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "loguru>=0.7.2",
    "geopy>=2.4.0",
    "folium>=0.15.0",
    "openpyxl>=3.1.0",
    "tenacity>=8.2.0",
    "urllib3>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/estebancr1993/Netflix-OCA-Servers-Locator"
Documentation = "https://github.com/estebancr1993/Netflix-OCA-Servers-Locator#readme"
Repository = "https://github.com/estebancr1993/Netflix-OCA-Servers-Locator.git"
Issues = "https://github.com/estebancr1993/Netflix-OCA-Servers-Locator/issues"

[project.scripts]
netflix-oca-locator = "netflix_oca_locator.__main__:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.23.0",
    "ruff>=0.3.0",
    "mypy>=1.8.0",
    "types-requests>=2.31.0",
    "pandas-stubs>=2.0.0",
    "safety>=3.0.0",
    "bandit>=1.7.0",
]

[tool.ruff]
target-version = "py39"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501", # line too long (handled by formatter)
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=netflix_oca_locator",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src/netflix_oca_locator"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
